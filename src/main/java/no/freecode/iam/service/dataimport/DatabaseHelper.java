package no.freecode.iam.service.dataimport;

import com.google.inject.Inject;
import org.apache.commons.dbutils.QueryRunner;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.sql.SQLException;

/**
 * @author <a href="mailto:erik@freecode.no">Erik Drolshammer</a>
 * @since 10/19/12
 */
public class DatabaseHelper {
    public static final String APPID_INVOICE = "101";
    public static final String APPID_STYREROMMET = "201";
    public static final String APPID_GIFTIT = "23";
    public static final String APPID_BRUKERADMIN = "1";
    public static final String APPID_FREECODEPERSONKUNDE = "50";

    public static final String APPID_GIFTIT_STORE = "45";


    private static final Logger logger = LoggerFactory.getLogger(DatabaseHelper.class);
    private final QueryRunner queryRunner;

    @Inject
    public DatabaseHelper(QueryRunner queryRunner) {
        this.queryRunner = queryRunner;
    }

    public void initDB() {
        createDatabaseTables();
        addDatabaseInitData();
    }

    private void createDatabaseTables() {
        logger.info("Creating UserPropertyAndRole tables.");
        try {
            queryRunner.update("CREATE TABLE UserRoles (" +
                    "  ID INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY," +
                    "  UserID char(36) NOT NULL," +
                    "  AppID varchar(32)," +
                    "  OrganizationId varchar(32)," +
                    "  RoleName varchar(32)," +
                    "  RoleValues varchar(256)" +
                    ")");
            queryRunner.update("CREATE TABLE Applications (" +
                    "  ID varchar(32)," +
                    "  Name varchar(128)," +
                    "  DefaultRole varchar(30) default null," +
                    "  DefaultOrgid varchar(30) default null" +
                    ")");
            queryRunner.update("CREATE TABLE Organization (" +
                    "  ID varchar(32)," +
                    "  Name varchar(128)" +
                    ")");
            queryRunner.update("CREATE TABLE Roles (" +
                    "  ID char(32)," +
                    "  Name varchar(128)" +
                    ")");
            queryRunner.update("CREATE TABLE AUDITLOG (" +
                    "  ID INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY," +
                    "  userid varchar(36)," +
                    "  timestamp varchar(20)," +
                    "  action varchar(32)," +
                    "  field varchar(32)," +
                    "  value varchar(256)" +
                    ")");
        } catch (SQLException e) {
            logger.info("Error creating tables", e);
        }
    }

    private void addDatabaseInitData() {
        try {
            logger.info("Legger inn grunndata");
            queryRunner.update("INSERT INTO Applications values ('" + APPID_BRUKERADMIN + "', 'Brukeradmin', 'Brukeradmin', '9999')");
            queryRunner.update("INSERT INTO Applications values ('" + APPID_GIFTIT + "', 'Giftit', 'GiftitTilgang', '9999')");
            queryRunner.update("INSERT INTO Applications values ('" + APPID_GIFTIT_STORE + "', 'GiftitStore', 'GiftitTilgang', '9999')");
            queryRunner.update("INSERT INTO Applications values ('" + APPID_STYREROMMET + "', 'Styrerommet', 'StyrerommetTilgang', '9999')");
            //queryRunner.update("INSERT INTO Applications values ('" + APPID_INVOICE + "', 'Invoice', 'InvoiceBruker', '9999')");
            queryRunner.update("INSERT INTO Applications values ('" + APPID_FREECODEPERSONKUNDE + "', 'FREECODE Personkunde', 'Kunde', '9999')");

            logger.info("Oppretter tabeller-stop");
            importerSelskaper();
        } catch (SQLException e) {
            logger.info("Error inserting init data.", e);
        }
    }

    private void importerSelskaper() {
        logger.info("Import selskaper");
        BufferedReader reader = null;
        try {
            InputStream classpathStream = getClass().getClassLoader().getResourceAsStream("selskaper.csv");
            InputStreamReader isr = new InputStreamReader(classpathStream, "UTF-8");
            reader = new BufferedReader(isr);
            String line = reader.readLine();
            /*
            while (line != null) {
                String[] columns = line.split(",");
                queryRunner.update("INSERT INTO Organization values (?, ?)", columns[0], columns[1]);
            }
            */
            while ((line = reader.readLine()) != null) {
                String[] columns = line.split(",");
                queryRunner.update("INSERT INTO Organization values (?, ?)", columns[0], columns[1]);
            }
        } catch (IOException e) {
            logger.error(e.getLocalizedMessage(), e);
        } catch (SQLException e) {
            logger.error(e.getLocalizedMessage(), e);
        } finally {
            if(reader != null) {
                try {
                    reader.close();
                } catch (IOException e) {
                    logger.warn("Error closing stream", e);
                }
            }
        }
    }


}
